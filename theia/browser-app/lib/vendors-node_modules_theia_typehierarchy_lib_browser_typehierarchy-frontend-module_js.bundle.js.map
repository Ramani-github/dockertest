{"version":3,"file":"vendors-node_modules_theia_typehierarchy_lib_browser_typehierarchy-frontend-module_js.bundle.js","mappings":"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","sources":["webpack:///../node_modules/@theia/typehierarchy/src/browser/style/index.css?../node_modules/css-loader/dist/cjs.js","webpack:///../node_modules/@theia/core/shared/@phosphor/widgets/index.js?","webpack:///../node_modules/@theia/core/shared/react/index.js?","webpack:///../node_modules/@theia/typehierarchy/src/browser/tree/typehierarchy-tree-container.ts?","webpack:///../node_modules/@theia/typehierarchy/src/browser/tree/typehierarchy-tree-model.ts?","webpack:///../node_modules/@theia/typehierarchy/src/browser/tree/typehierarchy-tree-widget.tsx?","webpack:///../node_modules/@theia/typehierarchy/src/browser/tree/typehierarchy-tree.ts?","webpack:///../node_modules/@theia/typehierarchy/src/browser/typehierarchy-contribution.ts?","webpack:///../node_modules/@theia/typehierarchy/src/browser/typehierarchy-frontend-module.ts?","webpack:///../node_modules/@theia/typehierarchy/src/browser/typehierarchy-provider.ts?","webpack:///../node_modules/@theia/typehierarchy/src/browser/style/index.css?"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/********************************************************************************\\n * Copyright (C) 2019 TypeFox and others.\\n *\\n * This program and the accompanying materials are made available under the\\n * terms of the Eclipse Public License v. 2.0 which is available at\\n * http://www.eclipse.org/legal/epl-2.0.\\n *\\n * This Source Code may also be made available under the following Secondary\\n * Licenses when the conditions for such availability set forth in the Eclipse\\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\\n * with the GNU Classpath Exception which is available at\\n * https://www.gnu.org/software/classpath/license.html.\\n *\\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\\n ********************************************************************************/\\n\\n.theia-type-hierarchy-tree {\\n    font-size: var(--theia-ui-font-size0);\\n}\\n\\n.theia-type-hierarchy-tree .theia-caption-suffix {\\n    padding-left: 10px !important;\\n}\\n\\n.theia-type-hierarchy-tree .theia-caption-prefix {\\n    padding-right: 5px !important;\\n    padding-left: 1px !important;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./../node_modules/@theia/typehierarchy/src/browser/style/index.css\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,qCAAqC;AACzC;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,6BAA6B;IAC7B,4BAA4B;AAChC\",\"sourcesContent\":[\"/********************************************************************************\\n * Copyright (C) 2019 TypeFox and others.\\n *\\n * This program and the accompanying materials are made available under the\\n * terms of the Eclipse Public License v. 2.0 which is available at\\n * http://www.eclipse.org/legal/epl-2.0.\\n *\\n * This Source Code may also be made available under the following Secondary\\n * Licenses when the conditions for such availability set forth in the Eclipse\\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\\n * with the GNU Classpath Exception which is available at\\n * https://www.gnu.org/software/classpath/license.html.\\n *\\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\\n ********************************************************************************/\\n\\n.theia-type-hierarchy-tree {\\n    font-size: var(--theia-ui-font-size0);\\n}\\n\\n.theia-type-hierarchy-tree .theia-caption-suffix {\\n    padding-left: 10px !important;\\n}\\n\\n.theia-type-hierarchy-tree .theia-caption-prefix {\\n    padding-right: 5px !important;\\n    padding-left: 1px !important;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","module.exports = require('@phosphor/widgets');\n","module.exports = require('react');\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { interfaces, Container } from '@theia/core/shared/inversify';\nimport { createTreeContainer, Tree, TreeImpl, TreeModel, TreeModelImpl, TreeWidget } from '@theia/core/lib/browser/tree';\nimport { TypeHierarchyTree } from './typehierarchy-tree';\nimport { TypeHierarchyTreeModel } from './typehierarchy-tree-model';\nimport { TypeHierarchyTreeWidget } from './typehierarchy-tree-widget';\n\nfunction createHierarchyTreeContainer(parent: interfaces.Container): Container {\n    const child = createTreeContainer(parent);\n\n    child.unbind(TreeImpl);\n    child.bind(TypeHierarchyTree).toSelf();\n    child.rebind(Tree).toService(TypeHierarchyTree);\n\n    child.unbind(TreeModelImpl);\n    child.bind(TypeHierarchyTreeModel).toSelf();\n    child.rebind(TreeModel).toService(TypeHierarchyTreeModel);\n\n    child.bind(TypeHierarchyTreeWidget).toSelf();\n    child.rebind(TreeWidget).toService(TypeHierarchyTreeWidget);\n\n    return child;\n}\n\nexport function createHierarchyTreeWidget(parent: interfaces.Container): TypeHierarchyTreeWidget {\n    return createHierarchyTreeContainer(parent).get(TypeHierarchyTreeWidget);\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport { TreeNode } from '@theia/core/lib/browser/tree/tree';\nimport { TreeModelImpl } from '@theia/core/lib/browser/tree/tree-model';\nimport { TypeHierarchyRegistry, TypeHierarchyDirection, TypeHierarchyParams } from '../typehierarchy-provider';\nimport { TypeHierarchyTree } from './typehierarchy-tree';\n\n@injectable()\nexport class TypeHierarchyTreeModel extends TreeModelImpl {\n\n    @inject(TypeHierarchyRegistry)\n    protected readonly registry: TypeHierarchyRegistry;\n\n    protected doOpenNode(node: TreeNode): void {\n        // do nothing (in particular do not expand the node)\n    }\n\n    /**\n     * Initializes the tree by calculating and setting a new tree root node.\n     */\n    async initialize(options: TypeHierarchyTree.InitOptions): Promise<void> {\n        this.tree.root = undefined;\n        (this.tree as TypeHierarchyTree).provider = undefined;\n        const { location, languageId, direction } = options;\n        if (languageId && location) {\n            const provider = await this.registry.get(languageId);\n            if (provider) {\n                const params: TypeHierarchyParams = {\n                    textDocument: {\n                        uri: location.uri\n                    },\n                    position: location.range.start,\n                    direction,\n                    resolve: 1\n                };\n                const symbol = await provider.get(params);\n                if (symbol) {\n                    const root = TypeHierarchyTree.RootNode.create(symbol, direction);\n                    root.expanded = true;\n                    this.tree.root = root;\n                    (this.tree as TypeHierarchyTree).provider = provider;\n                }\n            }\n        }\n    }\n\n    /**\n     * If the tree root is set, it resets it with the inverse type hierarchy direction.\n     */\n    async flipDirection(): Promise<void> {\n        const { root } = this.tree;\n        const service = (this.tree as TypeHierarchyTree).provider;\n        if (TypeHierarchyTree.RootNode.is(root) && !!service) {\n            const { direction, item } = root;\n            const { uri, selectionRange } = item;\n            const location = {\n                uri,\n                range: selectionRange\n            };\n            this.initialize({\n                direction: direction === TypeHierarchyDirection.Children ? TypeHierarchyDirection.Parents : TypeHierarchyDirection.Children,\n                location,\n                languageId: service.languageId\n            });\n        }\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport * as React from '@theia/core/shared/react';\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport { DockPanel } from '@theia/core/shared/@phosphor/widgets';\nimport URI from '@theia/core/lib/common/uri';\nimport { SymbolKind, Range } from '@theia/core/shared/vscode-languageserver-protocol';\nimport { TreeNode } from '@theia/core/lib/browser/tree/tree';\nimport { EditorManager } from '@theia/editor/lib/browser/editor-manager';\nimport { ContextMenuRenderer } from '@theia/core/lib/browser/context-menu-renderer';\nimport { TreeWidget, TreeProps } from '@theia/core/lib/browser/tree/tree-widget';\nimport { TypeHierarchyTreeModel } from './typehierarchy-tree-model';\nimport { TypeHierarchyTree } from './typehierarchy-tree';\nimport { codicon } from '@theia/core/lib/browser';\nimport { nls } from '@theia/core/lib/common/nls';\n\n@injectable()\nexport class TypeHierarchyTreeWidget extends TreeWidget {\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected readonly icons = new Map(Array.from(Object.keys(SymbolKind)).map(key => [(SymbolKind as any)[key], key.toLocaleLowerCase()] as [number, string]));\n\n    constructor(\n        @inject(TreeProps) readonly props: TreeProps,\n        @inject(TypeHierarchyTreeModel) readonly model: TypeHierarchyTreeModel,\n        @inject(ContextMenuRenderer) readonly contextMenuRenderer: ContextMenuRenderer,\n        @inject(EditorManager) readonly editorManager: EditorManager\n    ) {\n        super(props, model, contextMenuRenderer);\n        this.id = TypeHierarchyTreeWidget.WIDGET_ID;\n        this.title.label = TypeHierarchyTreeWidget.WIDGET_LABEL;\n        this.title.caption = TypeHierarchyTreeWidget.WIDGET_LABEL;\n        this.addClass(TypeHierarchyTreeWidget.Styles.TYPE_HIERARCHY_TREE_CLASS);\n        this.title.closable = true;\n        this.title.iconClass = codicon('type-hierarchy');\n        this.toDispose.push(this.model.onSelectionChanged(selection => {\n            const node = selection[0];\n            if (node) {\n                this.openEditor(node, true);\n            }\n        }));\n        this.toDispose.push(this.model.onOpenNode(node => this.openEditor(node)));\n    }\n\n    /**\n     * Initializes the widget with the new input.\n     */\n    async initialize(options: TypeHierarchyTree.InitOptions): Promise<void> {\n        await this.model.initialize(options);\n    }\n\n    /**\n     * See: `TreeWidget#renderIcon`.\n     */\n    protected renderIcon(node: TreeNode): React.ReactNode {\n        if (TypeHierarchyTree.Node.is(node)) {\n            return <div className={'symbol-icon ' + this.icons.get(node.item.kind) || 'unknown'}></div>;\n        }\n        return undefined;\n    }\n\n    /**\n     * Opens up the node in the editor. On demand (`keepFocus`) it reveals the location in the editor.\n     */\n    protected async openEditor(node: TreeNode, keepFocus: boolean = false): Promise<void> {\n        if (TypeHierarchyTree.Node.is(node)) {\n            const { selectionRange, uri } = node.item;\n            const editorWidget = await this.editorManager.open(new URI(uri), {\n                mode: keepFocus ? 'reveal' : 'activate',\n                selection: Range.create(selectionRange.start, selectionRange.end)\n            });\n            if (editorWidget.parent instanceof DockPanel) {\n                editorWidget.parent.selectWidget(editorWidget);\n            }\n        }\n    }\n\n}\n\nexport namespace TypeHierarchyTreeWidget {\n\n    export const WIDGET_ID = 'theia-typehierarchy';\n    export const WIDGET_LABEL = nls.localize('theia/typehierarchy/typeHierarchy', 'Type Hierarchy');\n\n    /**\n     * CSS styles for the `Type Hierarchy` widget.\n     */\n    export namespace Styles {\n\n        export const TYPE_HIERARCHY_TREE_CLASS = 'theia-type-hierarchy-tree';\n\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from '@theia/core/shared/inversify';\nimport { v4 } from 'uuid';\nimport URI from '@theia/core/lib/common/uri';\nimport { Location } from '@theia/editor/lib/browser/editor';\nimport { TreeDecoration, DecoratedTreeNode } from '@theia/core/lib/browser/tree/tree-decorator';\nimport { TreeImpl, TreeNode, CompositeTreeNode, ExpandableTreeNode, SelectableTreeNode } from '@theia/core/lib/browser/tree';\nimport { TypeHierarchyProvider, TypeHierarchyDirection, ResolveTypeHierarchyItemParams, TypeHierarchyItem } from '../typehierarchy-provider';\n\n@injectable()\nexport class TypeHierarchyTree extends TreeImpl {\n\n    provider: TypeHierarchyProvider | undefined;\n\n    async resolveChildren(parent: CompositeTreeNode): Promise<TreeNode[]> {\n        if (TypeHierarchyTree.Node.is(parent)) {\n            await this.ensureResolved(parent);\n            if (parent.children.length === 0) {\n                delete parent.children;\n                delete parent.expanded;\n                return [];\n            }\n            return parent.children.slice();\n        }\n        return [];\n    }\n\n    /**\n     * Returns with the direction of the type hierarchy attached to the root node. `undefined` if the root is not set.\n     */\n    protected get direction(): TypeHierarchyDirection | undefined {\n        if (TypeHierarchyTree.RootNode.is(this.root)) {\n            return this.root.direction;\n        }\n        return undefined;\n    }\n\n    /**\n     * Makes sure, the node and its children are resolved. Resolves it on demand.\n     */\n    protected async ensureResolved(node: TypeHierarchyTree.Node): Promise<void> {\n        if (!node.resolved) {\n            const { provider, direction } = this;\n            if (provider && direction !== undefined) {\n                const { item } = node;\n                const param: ResolveTypeHierarchyItemParams = {\n                    item,\n                    direction,\n                    resolve: 1\n                };\n                const resolvedItem = await provider.resolve(param);\n                if (resolvedItem) {\n                    node.resolved = true;\n                    const items = TypeHierarchyDirection.Children === direction ? resolvedItem.children : resolvedItem.parents;\n                    if (items) {\n                        node.children = items.map(child => TypeHierarchyTree.Node.create(child, direction, false));\n                    } else {\n                        node.children = [];\n                    }\n                }\n            }\n        }\n    }\n\n}\n\nexport namespace TypeHierarchyTree {\n\n    export interface InitOptions {\n        readonly direction: TypeHierarchyDirection;\n        readonly location: Location | undefined;\n        readonly languageId: string | undefined;\n    }\n\n    export interface RootNode extends Node {\n        readonly direction: TypeHierarchyDirection;\n    }\n\n    export namespace RootNode {\n\n        export function is(node: TreeNode | undefined): node is RootNode {\n            if (Node.is(node) && 'direction' in node) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const { direction } = (node as any);\n                return direction === TypeHierarchyDirection.Children || direction === TypeHierarchyDirection.Parents;\n            }\n            return false;\n        }\n\n        export function create(item: TypeHierarchyItem, direction: TypeHierarchyDirection): RootNode {\n            return {\n                ...Node.create(item, direction, true),\n                direction\n            };\n        }\n\n    }\n\n    export interface Node extends CompositeTreeNode, ExpandableTreeNode, SelectableTreeNode, DecoratedTreeNode {\n        readonly item: TypeHierarchyItem;\n        resolved: boolean;\n    }\n\n    export namespace Node {\n\n        export function is(node: TreeNode | undefined): node is Node {\n            if (!!node && 'resolved' in node && 'item' in node) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const { resolved, item } = (node as any);\n                return typeof resolved === 'boolean' && !!item;\n            }\n            return false;\n        }\n\n        export function create(item: TypeHierarchyItem, direction: TypeHierarchyDirection, resolved: boolean = true): Node {\n            const items = TypeHierarchyDirection.Children === direction ? item.children : item.parents;\n            if (items && items.length > 0) {\n                // If the server sent more levels than requested, use them.\n                resolved = true;\n            }\n            const node = {\n                id: v4(),\n                name: item.name,\n                description: item.detail,\n                parent: undefined,\n                location: Location.create(item.uri, item.selectionRange),\n                resolved,\n                children: items ? items.map(child => create(child, direction, false)) : [],\n                expanded: false,\n                visible: true,\n                selected: false,\n                kind: item.kind,\n                decorationData: decorationData(item, direction),\n                item\n            };\n            // Trick: if the node is `resolved` and have zero `children`, make the node non-expandable.\n            if (resolved && node.children.length === 0) {\n                delete node.expanded;\n            }\n            return node;\n        }\n\n        function decorationData(item: TypeHierarchyItem, direction: TypeHierarchyDirection): TreeDecoration.Data {\n            const captionSuffixes: TreeDecoration.CaptionAffix[] = [{\n                data: new URI(item.uri).displayName,\n                fontData: {\n                    color: 'var(--theia-descriptionForeground)',\n                }\n            }];\n            if (item.detail) {\n                captionSuffixes.unshift({\n                    data: item.detail,\n                    fontData: {\n                        color: 'var(--theia-list-highlightForeground)',\n                        style: 'italic'\n                    }\n                });\n            }\n            const data = `${TypeHierarchyDirection.Children === direction ? '▼' : '▲'}`;\n            const color = `var(${TypeHierarchyDirection.Children === direction ? '--theia-errorForeground' : '--theia-successBackground'})`;\n            return {\n                captionSuffixes,\n                captionPrefixes: [{\n                    data,\n                    fontData: {\n                        color,\n                        style: 'bold'\n                    }\n                }]\n            };\n        }\n\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject, named } from '@theia/core/shared/inversify';\nimport { MenuModelRegistry } from '@theia/core/lib/common/menu';\nimport { ApplicationShell } from '@theia/core/lib/browser/shell';\nimport { KeybindingRegistry } from '@theia/core/lib/browser/keybinding';\nimport { Command, CommandRegistry } from '@theia/core/lib/common/command';\nimport { EDITOR_CONTEXT_MENU } from '@theia/editor/lib/browser/editor-menu';\nimport { EditorAccess } from '@theia/editor/lib/browser/editor-manager';\nimport { AbstractViewContribution, OpenViewArguments } from '@theia/core/lib/browser/shell/view-contribution';\nimport { TypeHierarchyTree } from './tree/typehierarchy-tree';\nimport { TypeHierarchyTreeWidget } from './tree/typehierarchy-tree-widget';\nimport { TypeHierarchyDirection } from './typehierarchy-provider';\n\n@injectable()\nexport class TypeHierarchyContribution extends AbstractViewContribution<TypeHierarchyTreeWidget> {\n\n    @inject(EditorAccess)\n    @named(EditorAccess.CURRENT)\n    protected readonly editorAccess: EditorAccess;\n\n    @inject(ApplicationShell)\n    protected readonly shell: ApplicationShell;\n\n    constructor() {\n        super({\n            widgetId: TypeHierarchyTreeWidget.WIDGET_ID,\n            widgetName: TypeHierarchyTreeWidget.WIDGET_LABEL,\n            defaultWidgetOptions: {\n                area: 'bottom'\n            },\n            toggleCommandId: TypeHierarchyCommands.TOGGLE_VIEW.id,\n            toggleKeybinding: 'ctrlcmd+shift+h'\n        });\n    }\n\n    async openView(args?: Partial<TypeHierarchyOpenViewArguments>): Promise<TypeHierarchyTreeWidget> {\n        const widget = await super.openView(args);\n        const { selection, languageId } = this.editorAccess;\n        const direction = this.getDirection(args);\n        await widget.initialize({ location: selection, languageId, direction });\n        return widget;\n    }\n\n    registerCommands(commands: CommandRegistry): void {\n        super.registerCommands(commands);\n        commands.registerCommand(TypeHierarchyCommands.OPEN_SUBTYPE, {\n            execute: () => this.openViewOrFlipHierarchyDirection(TypeHierarchyDirection.Children),\n            isEnabled: this.isEnabled.bind(this)\n        });\n        commands.registerCommand(TypeHierarchyCommands.OPEN_SUPERTYPE, {\n            execute: () => this.openViewOrFlipHierarchyDirection(TypeHierarchyDirection.Parents),\n            isEnabled: this.isEnabled.bind(this)\n        });\n    }\n\n    registerMenus(menus: MenuModelRegistry): void {\n        super.registerMenus(menus);\n        const menuPath = [...EDITOR_CONTEXT_MENU, 'type-hierarchy'];\n        menus.registerMenuAction(menuPath, {\n            commandId: TypeHierarchyCommands.OPEN_SUBTYPE.id\n        });\n        menus.registerMenuAction(menuPath, {\n            commandId: TypeHierarchyCommands.OPEN_SUPERTYPE.id\n        });\n    }\n\n    registerKeybindings(keybindings: KeybindingRegistry): void {\n        super.registerKeybindings(keybindings);\n        keybindings.registerKeybinding({\n            command: TypeHierarchyCommands.OPEN_SUBTYPE.id,\n            keybinding: 'ctrlcmd+alt+h'\n        });\n    }\n\n    /**\n     * Flips the hierarchy direction in the `Type Hierarchy` view, if it is active and has a valid root.\n     * Otherwise, calculates the type hierarchy based on the selection of the current editor.\n     */\n    protected async openViewOrFlipHierarchyDirection(direction: TypeHierarchyDirection): Promise<void> {\n        if (this.isEnabled()) {\n            const { activeWidget } = this.shell;\n            if (activeWidget instanceof TypeHierarchyTreeWidget && TypeHierarchyTree.RootNode.is(activeWidget.model.root)) {\n                await activeWidget.model.flipDirection();\n            } else {\n                await this.openView({\n                    toggle: false,\n                    activate: true,\n                    direction\n                });\n            }\n        }\n    }\n\n    /**\n     * Enabled if the `current` editor has the `languageId` or the `Type Hierarchy` widget is the active one.\n     */\n    protected isEnabled(languageId: string | undefined = this.editorAccess.languageId): boolean {\n        return !!languageId || this.shell.activeWidget instanceof TypeHierarchyTreeWidget;\n    }\n\n    /**\n     * Extracts the type hierarchy direction from the argument. If the direction cannot be extracted, returns with the `Children` as the default type.\n     */\n    protected getDirection(args?: Partial<TypeHierarchyOpenViewArguments>): TypeHierarchyDirection {\n        return !!args && !!args.direction ? args.direction : TypeHierarchyDirection.Children;\n    }\n\n}\n\nexport interface TypeHierarchyOpenViewArguments extends OpenViewArguments {\n\n    /**\n     * The type hierarchy direction for the view argument.\n     */\n    readonly direction: TypeHierarchyDirection;\n\n}\n\nexport namespace TypeHierarchyCommands {\n\n    export const TOGGLE_VIEW: Command = {\n        id: 'typehierarchy:toggle'\n    };\n\n    export const OPEN_SUBTYPE = Command.toLocalizedCommand({\n        id: 'typehierarchy:open-subtype',\n        label: 'Subtype Hierarchy'\n    }, 'theia/typehierarchy/subtypeHierarchy');\n\n    export const OPEN_SUPERTYPE = Command.toLocalizedCommand({\n        id: 'typehierarchy:open-supertype',\n        label: 'Supertype Hierarchy'\n    }, 'theia/typehierarchy/supertypeHierarchy');\n\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\nimport { ContainerModule } from '@theia/core/shared/inversify';\nimport { WidgetFactory } from '@theia/core/lib/browser/widget-manager';\nimport { bindViewContribution } from '@theia/core/lib/browser/shell/view-contribution';\nimport { TypeHierarchyRegistry } from './typehierarchy-provider';\nimport { TypeHierarchyContribution } from './typehierarchy-contribution';\nimport { TypeHierarchyTreeWidget } from './tree/typehierarchy-tree-widget';\nimport { createHierarchyTreeWidget } from './tree/typehierarchy-tree-container';\n\nimport '../../src/browser/style/index.css';\n\nexport default new ContainerModule(bind => {\n    bind(TypeHierarchyRegistry).toSelf().inSingletonScope();\n    bindViewContribution(bind, TypeHierarchyContribution);\n    bind(WidgetFactory).toDynamicValue(context => ({\n        id: TypeHierarchyTreeWidget.WIDGET_ID,\n        createWidget: () => createHierarchyTreeWidget(context.container)\n    }));\n});\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from '@theia/core/shared/inversify';\nimport { Disposable } from '@theia/core/lib/common/disposable';\nimport { SymbolKind, Range, TextDocumentPositionParams } from '@theia/core/shared/vscode-languageserver-protocol';\n\n@injectable()\nexport class TypeHierarchyRegistry {\n\n    protected readonly providers = new Map<string, TypeHierarchyProvider>();\n\n    async get(languageId: string | undefined): Promise<TypeHierarchyProvider | undefined> {\n        return languageId ? this.providers.get(languageId) : undefined;\n    }\n\n    register(provider: TypeHierarchyProvider): Disposable {\n        const { languageId } = provider;\n        if (this.providers.has(languageId)) {\n            throw new Error(`type hierarchy provider for '${languageId}' language is already registered`);\n        }\n        this.providers.set(languageId, provider);\n        return Disposable.create(() => this.providers.delete(languageId));\n    }\n\n}\n\nexport interface TypeHierarchyProvider extends Disposable {\n    readonly languageId: string;\n    get(params: TypeHierarchyParams): Promise<TypeHierarchyItem | undefined>;\n    resolve(params: ResolveTypeHierarchyItemParams): Promise<TypeHierarchyItem | undefined>;\n\n}\n\n/**\n * The type hierarchy params is an extension of the `TextDocumentPositionParams` with optional properties\n * which can be used to eagerly resolve the item when requesting from the server.\n */\nexport interface TypeHierarchyParams extends TextDocumentPositionParams {\n\n    /**\n     * The hierarchy levels to resolve. `0` indicates no level. When not defined, it is treated as `0`.\n     */\n    resolve?: number;\n\n    /**\n     * The direction of the hierarchy levels to resolve.\n     */\n    direction?: TypeHierarchyDirection\n\n}\n\nexport const enum TypeHierarchyDirection {\n\n    /**\n     * Flag for retrieving/resolving the subtypes.\n     */\n    Children,\n\n    /**\n     * Flag to use when retrieving/resolving the supertypes.\n     */\n    Parents,\n\n    /**\n     * Flag for resolving both the super- and subtypes.\n     */\n    Both\n\n}\n\n/**\n * Parameters for the `typeHierarchy/resolve` request.\n */\nexport interface ResolveTypeHierarchyItemParams {\n\n    /**\n     * The item to resolve.\n     */\n    item: TypeHierarchyItem;\n\n    /**\n     * The hierarchy levels to resolve. `0` indicates no level.\n     */\n    resolve: number;\n\n    /**\n     * The direction of the hierarchy levels to resolve.\n     */\n    direction: TypeHierarchyDirection;\n}\n\nexport interface TypeHierarchyItem {\n\n    /**\n     * The human readable name of the hierarchy item.\n     */\n    name: string;\n\n    /**\n     * Optional detail for the hierarchy item. It can be, for instance, the signature of a function or method.\n     */\n    detail?: string;\n\n    /**\n     * The kind of the hierarchy item. For instance, class or interface.\n     */\n    kind: SymbolKind;\n\n    /**\n     * `true` if the hierarchy item is deprecated. Otherwise, `false`. It is `false` by default.\n     */\n    deprecated?: boolean;\n\n    /**\n     * The URI of the text document where this type hierarchy item belongs to.\n     */\n    uri: string;\n\n    /**\n     * The range enclosing this type hierarchy item not including leading/trailing whitespace but everything else\n     * like comments. This information is typically used to determine if the clients cursor is inside the type\n     * hierarchy item to reveal in the symbol in the UI.\n     */\n    range: Range;\n\n    /**\n     * The range that should be selected and revealed when this type hierarchy item is being picked, e.g the name\n     * of a function. Must be contained by the `range`.\n     */\n    selectionRange: Range;\n\n    /**\n     * If this type hierarchy item is resolved, it contains the direct parents. Could be empty if the item does\n     * not have any direct parents. If not defined, the parents have not been resolved yet.\n     */\n    parents?: TypeHierarchyItem[];\n\n    /**\n     * If this type hierarchy item is resolved, it contains the direct children of the current item. Could be\n     * empty if the item does not have any descendants. If not defined, the children have not been resolved.\n     */\n    children?: TypeHierarchyItem[];\n\n    /**\n     * An optional data field can be used to identify a type hierarchy item in a resolve request.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: any;\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};"],"names":[],"sourceRoot":""}